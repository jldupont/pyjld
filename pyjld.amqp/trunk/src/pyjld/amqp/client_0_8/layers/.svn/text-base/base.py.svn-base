#!/usr/bin/env python
"""
pyjld.amqp.client_0_8.layers.base
"""
__author__  = "Jean-Lou Dupont"
__email     = "python (at) jldupont.com"
__fileid    = "$Id$"

__all__ = [ 'LayerBase',
           ]

__msg_id = [    'error_layerbase_EOF',
                'error_layerbase_invalid_value',
            ]


from pyjld.amqp.client_0_8.serialization import AMQPReaderException, AMQPWriter
from pyjld.amqp.client_0_8.base          import BaseException


class LayerProcessorBase(object):
    
    DUMP_CHARS = string.letters + string.digits + string.punctuation

    def _hexdump(s):
        """
        Present just for debugging help.
    
        """
        output = None
        while s:
            x, s = s[:16], s[16:]
    
            hex = ['%02x' % ord(ch) for ch in x]
            hex = ' '.join(hex).ljust(50)
    
            char_dump = []
            for ch in x:
                if ch in DUMP_CHARS:
                    char_dump.append(ch)
                else:
                    char_dump.append('.')
    
            output = output + hex + ''.join(char_dump)

        return output

    ##############
    #
    # PRIVATE
    #        
    
    def _getExceptionClass(self):
        """
        Returns the exception class that must be
        used when encountering an exception in ``processHeader``
        """
        raise


    def _raiseException(self, message, msg_id, **kw):
        """
        """
        exc_class = self._getExceptionClass()
        raise exc_class(message, msg_id, **kw)


                


# =========================================================================================
# =========================================================================================


class LayerBase(LayerProcessorBase):
    """
    Base class for all layer classes
    """

    def setStream(self, stream):
        self._stream = stream

    ###############
    #
    # TO SUBCLASS
    #
    

    def readHeader(self):
        raise
    
    def readBody(self):
        raise
    
    def readFooter(self):
        raise
    
    def writeHeader(self):
        raise
    
    def writeBody(self):
        raise
    
    def writeFooter(self):
        raise


    ##################
    #
    # PRIVATE
    #
    #
    def __setattr__(self, attr, value):
        if attr not in self._ATTRIBUTES:
            raise AttributeError("invalid attribute [%s]" % attr)
        
        setattr(self, attr, value)


    def _writeList(self, liste):
        """
        Perform a batch write for list which
        contains directives on what attributes
        to get locally & corresponding type.
        
        If the attribute name is None, use
        the tuple's ``value`` parameter instead;
        this way, both fixed and variable headers
        are supported.
  
        """
        for item in liste:
            type, attr, value = item
            
            method_name = "write_%s" % type
            method = getattr(self._stream, method_name, None)
            if method is None:
                self._raiseException("invalid type [%s]" % type, 
                                     "error_layerwriterbase_invalid_type",
                                     type=type
                                     )
                
            if attr is not None:
                #read the local attribute's value
                val = getattr(self, attr)
            else:
                val = value

            #perform the write
            method( val )


    def _readList(self, directives):
        """
        Processes the stream's header
        
        ** Directives **
        
            (type, attribute, expected)
            
        The protocol layers do not contain "bit" structures
        and thus the AMQPReader will not throw AMQPReaderException;
        all exceptions coming from AMQPReader will be as a result
        of an EOF.
        """
        for directive in directives:
            type, attribute, expected = directive
            
            try:
                read_method_name = "read_%s" % type
                read_method = getattr(self._stream, read_method_name)
                value = read_method()
                
            # too short most probably
            except Exception,e:
                self._raiseException("EOF reached, expecting type[%s]" % type,
                                     "error_layerbase_EOF",
                                     exc=e,
                                     type=type
                                     )
            
            if attribute is not None:
                setattr(self, attribute, value)
                
            if expected is not None:
                if value != expected:
                    self._raiseException("expecting [%s] got[%s]" % (expected, value),
                                         "error_layerbase_invalid_value",
                                         expected=expected,
                                         value=value
                                         )
