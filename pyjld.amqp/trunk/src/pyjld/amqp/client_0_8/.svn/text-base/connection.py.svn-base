#!/usr/bin/env python
"""
pyjld.amqp.client_0_8.connection

This module is thread safe.
"""
__author__  = "Jean-Lou Dupont"
__email     = "python (at) jldupont.com"
__fileid    = "$Id$"

__all__ = ['',]

import Queue
import threading

from twisted.internet import task
from twisted.internet import reactor
from twisted.internet.protocol import Protocol, ClientFactory


from logger import doLog


class Connection(object):
    """
    Connection to server
    
    Two queues are provisionned to communicate on the connection: 
    
     * egress (send via network)
     * ingress (received from network). 
    
    """
    
    def __init__(self, host, port, logger=None):
       
        self.logger = logger
        self.host = host
        self.port = port

        self.iq = Queue.Queue()
        self.eq = Queue.Queue()
        
    def setup(self):
        """
        """
        self.transport_factory = TransportFactory(self.iq, self.eq, self.logger)
        reactor.connectTCP(self.host, self.port, self.transport_factory)
        

    def getQueues(self):
        """
        Returns the queues for communicating with this transport
        """
        return (self.iq, self.eq)
    
    
    def write(self, data):
        self.eq.put(data)

        
        
    ##############################
    #
    # PRIVATE
    #    


        


     
## ==========================================================================
## ==========================================================================

class TransportFactory(ClientFactory):
    """
    Transport Factory for the transport protocol
    
    A factory is used in order to be able to pass elegantly the
    connection queues.
    """

    
    def __init__(self, ingressQueue, egressQueue, logger = None):
        #ClientFactory.__init__(self)
        self.logger = logger
        self.iq = ingressQueue
        self.eq = egressQueue

    def startedConnecting(self, connector):
        doLog(self.logger, "TransportFactory", "debug", "startedConnecting")
    
    def buildProtocol(self, addr):
        """
        Builds a Transport protocol instance
        """
        doLog(self.logger, "TransportFactory", "debug", "buildProtocol")
        return Transport(self.iq, self.eq, self.logger)
    
    def clientConnectionLost(self, connector, reason):
        doLog(self.logger, "TransportFactory", "debug", "clientConnectionLost, reason [%s]" % reason)
        connector.connect()

    
    def clientConnectionFailed(self, connector, reason):
        doLog(self.logger, "TransportFactory", "debug", "clientConnectionFailed, reason [%s]" % reason)
        
    


## ==========================================================================
## ==========================================================================


        
class Transport(Protocol):
    """
    Twisted based transport protocol
    """
    
    _EGRESS_QUEUE_PROCESSING_INTERVAL = 0.250
        
    def __init__(self, ingressQueue, egressQueue, logger=None):
        #Protocol.__init__(self)
        self.logger = logger
        self.iq = ingressQueue
        self.eq = egressQueue

        self._setup_EgressQueueProcessingTask()

    
    def connectionMade(self):
        ""
        doLog(self.logger, "Transport", "debug", "connectionMade")
        #print "connectionMade: type[%s]" % type(self.transport)
        
    def dataReceived(self, data):
        """
        Simply queue the received data
        """
        self.iq.put(data)
        doLog(self.logger, "Transport", "debug", "dataReceived, len[%s]" % len(data))
        
    def connectionLost(self, reason):
        ""
        doLog(self.logger, "Transport", "debug", "connectionLost")
        
        # no connection -> no use draining the queue        
        self.egressQueueTask.stop()
        self._drainEgressQueue()
        
    def _drainEgressQueue(self):
        """
        Drains the egress queue
        """ 
        try:
            while not self.eq.empty():
                self.eq.task_done()
        except:
            pass


    def _setup_EgressQueueProcessingTask(self):
        """
        Registers a task with twisted for
        processing the egress queue
        """
        self.egressQueueTask = task.LoopingCall( self._processEgressQueue )
        self.egressQueueTask.start( self._EGRESS_QUEUE_PROCESSING_INTERVAL )
        

    def _processEgressQueue(self):
        """
        Sends data to the server if some is available
        
        TODO: batch send?
        """
        #doLog(self.logger,"Transport","debug","begin _processEgressQueue")
        try:
            data_to_send = self.eq.get(block=False)
        except Queue.Empty, e:
            return
        except Exception,e: 
            doLog(self.logger,"Transport","error", "_procressEgressQueue: error dequeuing [%s]" % e)
            return

        print "class: %s" % self.__class__
        print "_processEgressQueue: type: %s" % type(self.transport)
        

        try:
            self.transport.write( data_to_send )
        except Exception,e:
            doLog(self.logger,"Transport","error", "_procressEgressQueue: transport write error[%s] type[%s] data_to_send[%s]" % (e,type(data_to_send), data_to_send))
            return
        
        try:
            self.eq.task_done()
            doLog(self.logger, "Transport", "debug", "sent data, len[%s]" % len(data_to_send))
        except Exception,e:
            doLog(self.logger,"Transport","error", "_procressEgressQueue: task_done error[%s] type[%s] data_to_send[%s]" % (type(e),type(data_to_send), data_to_send))
            return
